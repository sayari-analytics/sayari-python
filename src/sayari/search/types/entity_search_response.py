# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...base_types.types.paginated_response import PaginatedResponse
from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .search_results import SearchResults


class EntitySearchResponse(PaginatedResponse):
    """
    OK
    ---
    from sayari import (
        Coordinates,
        EntitySearchResponse,
        Identifier,
        QualifiedCount,
        RiskData,
        SearchResults,
        SourceCountInfo,
        Status,
    )

    EntitySearchResponse(
        offset=0,
        limit=1,
        size=QualifiedCount(
            count=50,
            qualifier="eq",
        ),
        next=True,
        data=[
            SearchResults(
                id="mGq1lpuqKssNWTjIokuPeA",
                label="VICTORIA BECKHAM LIMITED",
                degree=21,
                entity_url="/v1/entity/mGq1lpuqKssNWTjIokuPeA",
                pep=False,
                psa_id="1297080710449",
                psa_count=5,
                sanctioned=False,
                closed=False,
                company_type="Private Limited Company",
                registration_date="Incorporated 2008-02-28",
                latest_status=Status(
                    status="active",
                ),
                type="company",
                identifiers=[
                    Identifier(
                        value="06517802",
                        type="uk_company_number",
                        label="Uk Company Number",
                    ),
                    Identifier(
                        value="6517802",
                        type="unknown",
                        label="Unknown",
                    ),
                ],
                addresses=[
                    "Unit 33, Ransomes Dock Business Centre, 35-37 Parkgate Road, London SW11 4NP",
                    "202 HAMMERSMITH ROAD, LONDON, W6 7DN",
                    "Hammersmith Road, London, W6 7DN",
                ],
                countries=["GBR"],
                relationship_count={
                    "linked_to": 3,
                    "shareholder_of": 1,
                    "has_shareholder": 2,
                    "has_registered_agent": 4,
                    "has_director": 11,
                    "owner_of": 3,
                },
                source_count={
                    "2b618f1996252fe537a6d998ae14c9b2": SourceCountInfo(
                        count=1,
                        label="UK Corporate Registry Confirmation Statements",
                    ),
                    "ecdfb3f2ecc8c3797e77d5795a8066ef": SourceCountInfo(
                        count=34,
                        label="UK Corporate Registry",
                    ),
                    "2a4fe9a14e332c8f9ded1f8a457c2b89": SourceCountInfo(
                        count=34,
                        label="UK Land Commercial and Corporate Ownership Data (CCOD)",
                    ),
                    "4ea8bac1bed868e1510ffd21842e9551": SourceCountInfo(
                        count=62,
                        label="UK Persons with Significant Control",
                    ),
                },
                risk={
                    "basel_aml": RiskData(
                        value=3.99,
                        metadata={"country": ["GBR"]},
                        level="relevant",
                    ),
                    "cpi_score": RiskData(
                        value=78.0,
                        metadata={"country": ["GBR"]},
                        level="relevant",
                    ),
                },
                user_attribute_count={},
                user_record_count=0,
                user_related_entities_count=0,
                user_relationship_count={},
                related_entities_count=21,
                attribute_count={
                    "company_type": 1,
                    "name": 2,
                    "business_purpose": 3,
                    "identifier": 2,
                    "additional_information": 1,
                    "country": 3,
                    "status": 2,
                    "address": 3,
                },
                coordinates=[
                    Coordinates(
                        lat=51.47905104675138,
                        lng=-0.16733654784070517,
                        address="Unit 33, Ransomes Dock Business Centre, 35-37 Parkgate Road, London SW11 4NP",
                    ),
                    Coordinates(
                        lat=51.493125044182044,
                        lng=-0.2220310517567186,
                        address="202 HAMMERSMITH ROAD, LONDON, W6 7DN",
                    ),
                    Coordinates(
                        lat=51.493080000000006,
                        lng=-0.22138000000000002,
                        address="Hammersmith Road, London, W6 7DN",
                    ),
                ],
                matches={
                    "name": [
                        "<em>VICTORIA</em> <em>BECKHAM</em> <em>LIMITED</em>",
                        "<em>BECKHAM</em> VENTURES <em>LIMITED</em>",
                        "<em>VICTORIA</em> <em>BECKHAM</em> LIMITED",
                        "<em>BECKHAM</em> VENTURES LIMITED",
                    ]
                },
            )
        ],
    )
    """

    offset: int
    next: bool
    data: typing.List[SearchResults]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
