# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .business_purpose import BusinessPurpose
from .monetary_value import MonetaryValue
from .shipment_country import ShipmentCountry
from .shipment_identifier import ShipmentIdentifier
from .shipment_metadata import ShipmentMetadata
from .source_or_destination_entity import SourceOrDestinationEntity
from .weight import Weight

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Shipment(pydantic.BaseModel):
    monetary_value: typing.List[MonetaryValue]
    dst: typing.List[SourceOrDestinationEntity]
    weight: typing.List[Weight]
    business_purpose: typing.List[BusinessPurpose]
    identifier: typing.List[ShipmentIdentifier]
    country: typing.List[ShipmentCountry]
    src: typing.List[SourceOrDestinationEntity]
    metadata: ShipmentMetadata

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
