# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..generated_types.country import Country
from ..generated_types.relationships import Relationships
from ..shared_types.entity_id import EntityId
from ..shared_types.risk import Risk
from .business_purpose import BusinessPurpose

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SourceOrDestinationEntity(pydantic.BaseModel):
    risk_factors: typing.Dict[Risk, typing.Any]
    name: typing.List[str]
    business_purpose: typing.List[BusinessPurpose]
    country: typing.List[Country]
    date: typing.Optional[str]
    entity_id: EntityId
    type: Relationships

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
