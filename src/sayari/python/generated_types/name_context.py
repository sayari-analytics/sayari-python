# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class NameContext(str, enum.Enum):
    """
    Name context enums describe different ways in which a name can belong to an entity
    """

    PRIMARY = "primary"
    """
    The main name, full name, or "best name" for an entity
    """

    GIVEN = "given"
    """
    A given name (i.e. first name, middle name)
    """

    FAMILY = "family"
    """
    A family name (i.e. last name)
    """

    ALIAS = "alias"
    """
    An alternative, former, or otherwise non-primary name
    """

    MACHINE_TRANSLATION = "machine_translation"
    """
    A machine translation of a name
    """

    TRANSLITERATION = "transliteration"
    """
    A machine transliteration of a name using a specific system (e.g. Pinyin, ISO, UNGEGN)
    """

    def visit(
        self,
        primary: typing.Callable[[], T_Result],
        given: typing.Callable[[], T_Result],
        family: typing.Callable[[], T_Result],
        alias: typing.Callable[[], T_Result],
        machine_translation: typing.Callable[[], T_Result],
        transliteration: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is NameContext.PRIMARY:
            return primary()
        if self is NameContext.GIVEN:
            return given()
        if self is NameContext.FAMILY:
            return family()
        if self is NameContext.ALIAS:
            return alias()
        if self is NameContext.MACHINE_TRANSLATION:
            return machine_translation()
        if self is NameContext.TRANSLITERATION:
            return transliteration()
