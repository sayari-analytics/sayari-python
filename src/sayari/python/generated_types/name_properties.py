# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .language import Language

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class NameProperties(pydantic.BaseModel):
    context: typing.Optional[str]
    date: typing.Optional[str] = pydantic.Field(description="as-of date")
    from_date: typing.Optional[str] = pydantic.Field(description="start date")
    language: typing.Optional[Language] = pydantic.Field(description="The language that the name is in")
    to_date: typing.Optional[str] = pydantic.Field(description="end date")
    translated: typing.Optional[str] = pydantic.Field(description="The name value translated to English")
    transliterated: typing.Optional[str] = pydantic.Field(description="The name value transliterated to English")
    value: str = pydantic.Field(description="The name, as text")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
