# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class NameContext(str, enum.Enum):
    PRIMARY = "primary"
    GIVEN = "given"
    FAMILY = "family"
    ALIAS = "alias"
    MACHINE_TRANSLATION = "machine_translation"
    TRANSLITERATION = "transliteration"

    def visit(
        self,
        primary: typing.Callable[[], T_Result],
        given: typing.Callable[[], T_Result],
        family: typing.Callable[[], T_Result],
        alias: typing.Callable[[], T_Result],
        machine_translation: typing.Callable[[], T_Result],
        transliteration: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is NameContext.PRIMARY:
            return primary()
        if self is NameContext.GIVEN:
            return given()
        if self is NameContext.FAMILY:
            return family()
        if self is NameContext.ALIAS:
            return alias()
        if self is NameContext.MACHINE_TRANSLATION:
            return machine_translation()
        if self is NameContext.TRANSLITERATION:
            return transliteration()
