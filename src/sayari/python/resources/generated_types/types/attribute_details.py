# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .additional_information_info import AdditionalInformationInfo
from .address_info import AddressInfo
from .business_purpose_info import BusinessPurposeInfo
from .company_type_info import CompanyTypeInfo
from .contact_info import ContactInfo
from .country_info import CountryInfo
from .date_of_birth_info import DateOfBirthInfo
from .finances_info import FinancesInfo
from .financials_info import FinancialsInfo
from .gender_info import GenderInfo
from .generic_info import GenericInfo
from .identifier_info import IdentifierInfo
from .measurement_info import MeasurementInfo
from .monetary_value_info import MonetaryValueInfo
from .name_info import NameInfo
from .person_status_info import PersonStatusInfo
from .position_info import PositionInfo
from .risk_intelligence_info import RiskIntelligenceInfo
from .shares_info import SharesInfo
from .status_info import StatusInfo
from .translated_name_info import TranslatedNameInfo
from .weak_identifier_info import WeakIdentifierInfo

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AttributeDetails(pydantic.BaseModel):
    additional_information: typing.Optional[AdditionalInformationInfo]
    address: typing.Optional[AddressInfo]
    business_purpose: typing.Optional[BusinessPurposeInfo]
    company_type: typing.Optional[CompanyTypeInfo]
    contact: typing.Optional[ContactInfo]
    country: typing.Optional[CountryInfo]
    date_of_birth: typing.Optional[DateOfBirthInfo]
    finances: typing.Optional[FinancesInfo]
    financials: typing.Optional[FinancialsInfo]
    gender: typing.Optional[GenderInfo]
    generic: typing.Optional[GenericInfo]
    identifier: typing.Optional[IdentifierInfo]
    measurement: typing.Optional[MeasurementInfo]
    monetary_value: typing.Optional[MonetaryValueInfo]
    name: typing.Optional[NameInfo]
    person_status: typing.Optional[PersonStatusInfo]
    position: typing.Optional[PositionInfo]
    risk_intelligence: typing.Optional[RiskIntelligenceInfo]
    shares: typing.Optional[SharesInfo]
    status: typing.Optional[StatusInfo]
    translated_name: typing.Optional[TranslatedNameInfo]
    weak_identifier: typing.Optional[WeakIdentifierInfo]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
