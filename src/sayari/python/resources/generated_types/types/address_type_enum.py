# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AddressTypeEnum(str, enum.Enum):
    ARRIVAL = "arrival"
    DEPARTURE = "departure"
    MAILING = "mailing"
    PHYSICAL = "physical"
    REGISTERED = "registered"

    def visit(
        self,
        arrival: typing.Callable[[], T_Result],
        departure: typing.Callable[[], T_Result],
        mailing: typing.Callable[[], T_Result],
        physical: typing.Callable[[], T_Result],
        registered: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is AddressTypeEnum.ARRIVAL:
            return arrival()
        if self is AddressTypeEnum.DEPARTURE:
            return departure()
        if self is AddressTypeEnum.MAILING:
            return mailing()
        if self is AddressTypeEnum.PHYSICAL:
            return physical()
        if self is AddressTypeEnum.REGISTERED:
            return registered()
