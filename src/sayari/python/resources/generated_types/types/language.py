# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class Language(str, enum.Enum):
    """
    Language enums are normalized representations of languages. Taken from https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
    """

    AA = "aa"
    """
    Afar
    """

    AB = "ab"
    """
    Abkhazian
    """

    AF = "af"
    """
    Afrikaans
    """

    AK = "ak"
    """
    Akan
    """

    SQ = "sq"
    """
    Albanian
    """

    AM = "am"
    """
    Amharic
    """

    AR = "ar"
    """
    Arabic
    """

    AN = "an"
    """
    Aragonese
    """

    HY = "hy"
    """
    Armenian
    """

    AS = "as"
    """
    Assamese
    """

    AV = "av"
    """
    Avaric
    """

    AE = "ae"
    """
    Avestan
    """

    AY = "ay"
    """
    Aymara
    """

    AZ = "az"
    """
    Azerbaijani
    """

    BA = "ba"
    """
    Bashkir
    """

    BM = "bm"
    """
    Bambara
    """

    EU = "eu"
    """
    Basque
    """

    BE = "be"
    """
    Belarusian
    """

    BN = "bn"
    """
    Bengali
    """

    BH = "bh"
    """
    Bihari languages
    """

    BI = "bi"
    """
    Bislama
    """

    BS = "bs"
    """
    Bosnian
    """

    BR = "br"
    """
    Breton
    """

    BG = "bg"
    """
    Bulgarian
    """

    MY = "my"
    """
    Burmese
    """

    CA = "ca"
    """
    Catalan; Valencian
    """

    CH = "ch"
    """
    Chamorro
    """

    CE = "ce"
    """
    Chechen
    """

    ZH = "zh"
    """
    Chinese
    """

    CU = "cu"
    """
    Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic
    """

    CV = "cv"
    """
    Chuvash
    """

    KW = "kw"
    """
    Cornish
    """

    CO = "co"
    """
    Corsican
    """

    CR = "cr"
    """
    Cree
    """

    CS = "cs"
    """
    Czech
    """

    DA = "da"
    """
    Danish
    """

    DV = "dv"
    """
    Divehi; Dhivehi; Maldivian
    """

    NL = "nl"
    """
    Dutch; Flemish
    """

    DZ = "dz"
    """
    Dzongkha
    """

    EN = "en"
    """
    English
    """

    EO = "eo"
    """
    Esperanto
    """

    ET = "et"
    """
    Estonian
    """

    EE = "ee"
    """
    Ewe
    """

    FO = "fo"
    """
    Faroese
    """

    FJ = "fj"
    """
    Fijian
    """

    FI = "fi"
    """
    Finnish
    """

    FR = "fr"
    """
    French
    """

    FY = "fy"
    """
    Western Frisian
    """

    FF = "ff"
    """
    Fulah
    """

    KA = "ka"
    """
    Georgian
    """

    DE = "de"
    """
    German
    """

    GD = "gd"
    """
    Gaelic; Scottish Gaelic
    """

    GA = "ga"
    """
    Irish
    """

    GL = "gl"
    """
    Galician
    """

    GV = "gv"
    """
    Manx
    """

    EL = "el"
    """
    Greek, Modern (1453-)
    """

    GN = "gn"
    """
    Guarani
    """

    GU = "gu"
    """
    Gujarati
    """

    HT = "ht"
    """
    Haitian; Haitian Creole
    """

    HA = "ha"
    """
    Hausa
    """

    HE = "he"
    """
    Hebrew
    """

    HZ = "hz"
    """
    Herero
    """

    HI = "hi"
    """
    Hindi
    """

    HO = "ho"
    """
    Hiri Motu
    """

    HR = "hr"
    """
    Croatian
    """

    HU = "hu"
    """
    Hungarian
    """

    IG = "ig"
    """
    Igbo
    """

    IS = "is"
    """
    Icelandic
    """

    IO = "io"
    """
    Ido
    """

    II = "ii"
    """
    Sichuan Yi; Nuosu
    """

    IU = "iu"
    """
    Inuktitut
    """

    IE = "ie"
    """
    Interlingue; Occidental
    """

    IA = "ia"
    """
    Interlingua (International Auxiliary Language Association)
    """

    ID = "id"
    """
    Indonesian
    """

    IK = "ik"
    """
    Inupiaq
    """

    IT = "it"
    """
    Italian
    """

    JV = "jv"
    """
    Javanese
    """

    JA = "ja"
    """
    Japanese
    """

    KL = "kl"
    """
    Kalaallisut; Greenlandic
    """

    KN = "kn"
    """
    Kannada
    """

    KS = "ks"
    """
    Kashmiri
    """

    KR = "kr"
    """
    Kanuri
    """

    KK = "kk"
    """
    Kazakh
    """

    KM = "km"
    """
    Central Khmer
    """

    KI = "ki"
    """
    Kikuyu; Gikuyu
    """

    RW = "rw"
    """
    Kinyarwanda
    """

    KY = "ky"
    """
    Kirghiz; Kyrgyz
    """

    KV = "kv"
    """
    Komi
    """

    KG = "kg"
    """
    Kongo
    """

    KO = "ko"
    """
    Korean
    """

    KJ = "kj"
    """
    Kuanyama; Kwanyama
    """

    KU = "ku"
    """
    Kurdish
    """

    LO = "lo"
    """
    Lao
    """

    LA = "la"
    """
    Latin
    """

    LV = "lv"
    """
    Latvian
    """

    LI = "li"
    """
    Limburgan; Limburger; Limburgish
    """

    LN = "ln"
    """
    Lingala
    """

    LT = "lt"
    """
    Lithuanian
    """

    LB = "lb"
    """
    Luxembourgish; Letzeburgesch
    """

    LU = "lu"
    """
    Luba-Katanga
    """

    LG = "lg"
    """
    Ganda
    """

    MK = "mk"
    """
    Macedonian
    """

    MH = "mh"
    """
    Marshallese
    """

    ML = "ml"
    """
    Malayalam
    """

    MI = "mi"
    """
    Maori
    """

    MR = "mr"
    """
    Marathi
    """

    MS = "ms"
    """
    Malay
    """

    MG = "mg"
    """
    Malagasy
    """

    MT = "mt"
    """
    Maltese
    """

    MN = "mn"
    """
    Mongolian
    """

    NA = "na"
    """
    Nauru
    """

    NV = "nv"
    """
    Navajo; Navaho
    """

    NR = "nr"
    """
    Ndebele, South; South Ndebele
    """

    ND = "nd"
    """
    Ndebele, North; North Ndebele
    """

    NG = "ng"
    """
    Ndonga
    """

    NE = "ne"
    """
    Nepali
    """

    NN = "nn"
    """
    Norwegian Nynorsk; Nynorsk, Norwegian
    """

    NB = "nb"
    """
    Bokmål, Norwegian; Norwegian Bokmål
    """

    NO = "no"
    """
    Norwegian
    """

    NY = "ny"
    """
    Chichewa; Chewa; Nyanja
    """

    OC = "oc"
    """
    Occitan (post 1500); Provençal
    """

    OJ = "oj"
    """
    Ojibwa
    """

    OR = "or"
    """
    Oriya
    """

    OM = "om"
    """
    Oromo
    """

    OS = "os"
    """
    Ossetian; Ossetic
    """

    PA = "pa"
    """
    Panjabi; Punjabi
    """

    FA = "fa"
    """
    Persian
    """

    PI = "pi"
    """
    Pali
    """

    PL = "pl"
    """
    Polish
    """

    PT = "pt"
    """
    Portuguese
    """

    PS = "ps"
    """
    Pushto; Pashto
    """

    QU = "qu"
    """
    Quechua
    """

    RM = "rm"
    """
    Romansh
    """

    RO = "ro"
    """
    Romanian; Moldavian; Moldovan
    """

    RN = "rn"
    """
    Rundi
    """

    RU = "ru"
    """
    Russian
    """

    SG = "sg"
    """
    Sango
    """

    SA = "sa"
    """
    Sanskrit
    """

    SI = "si"
    """
    Sinhala; Sinhalese
    """

    SK = "sk"
    """
    Slovak
    """

    SL = "sl"
    """
    Slovenian
    """

    SE = "se"
    """
    Northern Sami
    """

    SM = "sm"
    """
    Samoan
    """

    SN = "sn"
    """
    Shona
    """

    SD = "sd"
    """
    Sindhi
    """

    SO = "so"
    """
    Somali
    """

    ST = "st"
    """
    Sotho, Southern
    """

    ES = "es"
    """
    Spanish; Castilian
    """

    SC = "sc"
    """
    Sardinian
    """

    SR = "sr"
    """
    Serbian
    """

    SS = "ss"
    """
    Swati
    """

    SU = "su"
    """
    Sundanese
    """

    SW = "sw"
    """
    Swahili
    """

    SV = "sv"
    """
    Swedish
    """

    TY = "ty"
    """
    Tahitian
    """

    TA = "ta"
    """
    Tamil
    """

    TT = "tt"
    """
    Tatar
    """

    TE = "te"
    """
    Telugu
    """

    TG = "tg"
    """
    Tajik
    """

    TL = "tl"
    """
    Tagalog
    """

    TH = "th"
    """
    Thai
    """

    BO = "bo"
    """
    Tibetan
    """

    TI = "ti"
    """
    Tigrinya
    """

    TO = "to"
    """
    Tonga (Tonga Islands)
    """

    TN = "tn"
    """
    Tswana
    """

    TS = "ts"
    """
    Tsonga
    """

    TK = "tk"
    """
    Turkmen
    """

    TR = "tr"
    """
    Turkish
    """

    TW = "tw"
    """
    Twi
    """

    UG = "ug"
    """
    Uighur; Uyghur
    """

    UK = "uk"
    """
    Ukrainian
    """

    UR = "ur"
    """
    Urdu
    """

    UZ = "uz"
    """
    Uzbek
    """

    VE = "ve"
    """
    Venda
    """

    VI = "vi"
    """
    Vietnamese
    """

    VO = "vo"
    """
    Volapük
    """

    CY = "cy"
    """
    Welsh
    """

    WA = "wa"
    """
    Walloon
    """

    WO = "wo"
    """
    Wolof
    """

    XH = "xh"
    """
    Xhosa
    """

    YI = "yi"
    """
    Yiddish
    """

    YO = "yo"
    """
    Yoruba
    """

    ZA = "za"
    """
    Zhuang; Chuang
    """

    ZU = "zu"
    """
    Zulu
    """

    def visit(
        self,
        aa: typing.Callable[[], T_Result],
        ab: typing.Callable[[], T_Result],
        af: typing.Callable[[], T_Result],
        ak: typing.Callable[[], T_Result],
        sq: typing.Callable[[], T_Result],
        am: typing.Callable[[], T_Result],
        ar: typing.Callable[[], T_Result],
        an: typing.Callable[[], T_Result],
        hy: typing.Callable[[], T_Result],
        as_: typing.Callable[[], T_Result],
        av: typing.Callable[[], T_Result],
        ae: typing.Callable[[], T_Result],
        ay: typing.Callable[[], T_Result],
        az: typing.Callable[[], T_Result],
        ba: typing.Callable[[], T_Result],
        bm: typing.Callable[[], T_Result],
        eu: typing.Callable[[], T_Result],
        be: typing.Callable[[], T_Result],
        bn: typing.Callable[[], T_Result],
        bh: typing.Callable[[], T_Result],
        bi: typing.Callable[[], T_Result],
        bs: typing.Callable[[], T_Result],
        br: typing.Callable[[], T_Result],
        bg: typing.Callable[[], T_Result],
        my: typing.Callable[[], T_Result],
        ca: typing.Callable[[], T_Result],
        ch: typing.Callable[[], T_Result],
        ce: typing.Callable[[], T_Result],
        zh: typing.Callable[[], T_Result],
        cu: typing.Callable[[], T_Result],
        cv: typing.Callable[[], T_Result],
        kw: typing.Callable[[], T_Result],
        co: typing.Callable[[], T_Result],
        cr: typing.Callable[[], T_Result],
        cs: typing.Callable[[], T_Result],
        da: typing.Callable[[], T_Result],
        dv: typing.Callable[[], T_Result],
        nl: typing.Callable[[], T_Result],
        dz: typing.Callable[[], T_Result],
        en: typing.Callable[[], T_Result],
        eo: typing.Callable[[], T_Result],
        et: typing.Callable[[], T_Result],
        ee: typing.Callable[[], T_Result],
        fo: typing.Callable[[], T_Result],
        fj: typing.Callable[[], T_Result],
        fi: typing.Callable[[], T_Result],
        fr: typing.Callable[[], T_Result],
        fy: typing.Callable[[], T_Result],
        ff: typing.Callable[[], T_Result],
        ka: typing.Callable[[], T_Result],
        de: typing.Callable[[], T_Result],
        gd: typing.Callable[[], T_Result],
        ga: typing.Callable[[], T_Result],
        gl: typing.Callable[[], T_Result],
        gv: typing.Callable[[], T_Result],
        el: typing.Callable[[], T_Result],
        gn: typing.Callable[[], T_Result],
        gu: typing.Callable[[], T_Result],
        ht: typing.Callable[[], T_Result],
        ha: typing.Callable[[], T_Result],
        he: typing.Callable[[], T_Result],
        hz: typing.Callable[[], T_Result],
        hi: typing.Callable[[], T_Result],
        ho: typing.Callable[[], T_Result],
        hr: typing.Callable[[], T_Result],
        hu: typing.Callable[[], T_Result],
        ig: typing.Callable[[], T_Result],
        is_: typing.Callable[[], T_Result],
        io: typing.Callable[[], T_Result],
        ii: typing.Callable[[], T_Result],
        iu: typing.Callable[[], T_Result],
        ie: typing.Callable[[], T_Result],
        ia: typing.Callable[[], T_Result],
        id: typing.Callable[[], T_Result],
        ik: typing.Callable[[], T_Result],
        it: typing.Callable[[], T_Result],
        jv: typing.Callable[[], T_Result],
        ja: typing.Callable[[], T_Result],
        kl: typing.Callable[[], T_Result],
        kn: typing.Callable[[], T_Result],
        ks: typing.Callable[[], T_Result],
        kr: typing.Callable[[], T_Result],
        kk: typing.Callable[[], T_Result],
        km: typing.Callable[[], T_Result],
        ki: typing.Callable[[], T_Result],
        rw: typing.Callable[[], T_Result],
        ky: typing.Callable[[], T_Result],
        kv: typing.Callable[[], T_Result],
        kg: typing.Callable[[], T_Result],
        ko: typing.Callable[[], T_Result],
        kj: typing.Callable[[], T_Result],
        ku: typing.Callable[[], T_Result],
        lo: typing.Callable[[], T_Result],
        la: typing.Callable[[], T_Result],
        lv: typing.Callable[[], T_Result],
        li: typing.Callable[[], T_Result],
        ln: typing.Callable[[], T_Result],
        lt: typing.Callable[[], T_Result],
        lb: typing.Callable[[], T_Result],
        lu: typing.Callable[[], T_Result],
        lg: typing.Callable[[], T_Result],
        mk: typing.Callable[[], T_Result],
        mh: typing.Callable[[], T_Result],
        ml: typing.Callable[[], T_Result],
        mi: typing.Callable[[], T_Result],
        mr: typing.Callable[[], T_Result],
        ms: typing.Callable[[], T_Result],
        mg: typing.Callable[[], T_Result],
        mt: typing.Callable[[], T_Result],
        mn: typing.Callable[[], T_Result],
        na: typing.Callable[[], T_Result],
        nv: typing.Callable[[], T_Result],
        nr: typing.Callable[[], T_Result],
        nd: typing.Callable[[], T_Result],
        ng: typing.Callable[[], T_Result],
        ne: typing.Callable[[], T_Result],
        nn: typing.Callable[[], T_Result],
        nb: typing.Callable[[], T_Result],
        no: typing.Callable[[], T_Result],
        ny: typing.Callable[[], T_Result],
        oc: typing.Callable[[], T_Result],
        oj: typing.Callable[[], T_Result],
        or_: typing.Callable[[], T_Result],
        om: typing.Callable[[], T_Result],
        os: typing.Callable[[], T_Result],
        pa: typing.Callable[[], T_Result],
        fa: typing.Callable[[], T_Result],
        pi: typing.Callable[[], T_Result],
        pl: typing.Callable[[], T_Result],
        pt: typing.Callable[[], T_Result],
        ps: typing.Callable[[], T_Result],
        qu: typing.Callable[[], T_Result],
        rm: typing.Callable[[], T_Result],
        ro: typing.Callable[[], T_Result],
        rn: typing.Callable[[], T_Result],
        ru: typing.Callable[[], T_Result],
        sg: typing.Callable[[], T_Result],
        sa: typing.Callable[[], T_Result],
        si: typing.Callable[[], T_Result],
        sk: typing.Callable[[], T_Result],
        sl: typing.Callable[[], T_Result],
        se: typing.Callable[[], T_Result],
        sm: typing.Callable[[], T_Result],
        sn: typing.Callable[[], T_Result],
        sd: typing.Callable[[], T_Result],
        so: typing.Callable[[], T_Result],
        st: typing.Callable[[], T_Result],
        es: typing.Callable[[], T_Result],
        sc: typing.Callable[[], T_Result],
        sr: typing.Callable[[], T_Result],
        ss: typing.Callable[[], T_Result],
        su: typing.Callable[[], T_Result],
        sw: typing.Callable[[], T_Result],
        sv: typing.Callable[[], T_Result],
        ty: typing.Callable[[], T_Result],
        ta: typing.Callable[[], T_Result],
        tt: typing.Callable[[], T_Result],
        te: typing.Callable[[], T_Result],
        tg: typing.Callable[[], T_Result],
        tl: typing.Callable[[], T_Result],
        th: typing.Callable[[], T_Result],
        bo: typing.Callable[[], T_Result],
        ti: typing.Callable[[], T_Result],
        to: typing.Callable[[], T_Result],
        tn: typing.Callable[[], T_Result],
        ts: typing.Callable[[], T_Result],
        tk: typing.Callable[[], T_Result],
        tr: typing.Callable[[], T_Result],
        tw: typing.Callable[[], T_Result],
        ug: typing.Callable[[], T_Result],
        uk: typing.Callable[[], T_Result],
        ur: typing.Callable[[], T_Result],
        uz: typing.Callable[[], T_Result],
        ve: typing.Callable[[], T_Result],
        vi: typing.Callable[[], T_Result],
        vo: typing.Callable[[], T_Result],
        cy: typing.Callable[[], T_Result],
        wa: typing.Callable[[], T_Result],
        wo: typing.Callable[[], T_Result],
        xh: typing.Callable[[], T_Result],
        yi: typing.Callable[[], T_Result],
        yo: typing.Callable[[], T_Result],
        za: typing.Callable[[], T_Result],
        zu: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is Language.AA:
            return aa()
        if self is Language.AB:
            return ab()
        if self is Language.AF:
            return af()
        if self is Language.AK:
            return ak()
        if self is Language.SQ:
            return sq()
        if self is Language.AM:
            return am()
        if self is Language.AR:
            return ar()
        if self is Language.AN:
            return an()
        if self is Language.HY:
            return hy()
        if self is Language.AS:
            return as_()
        if self is Language.AV:
            return av()
        if self is Language.AE:
            return ae()
        if self is Language.AY:
            return ay()
        if self is Language.AZ:
            return az()
        if self is Language.BA:
            return ba()
        if self is Language.BM:
            return bm()
        if self is Language.EU:
            return eu()
        if self is Language.BE:
            return be()
        if self is Language.BN:
            return bn()
        if self is Language.BH:
            return bh()
        if self is Language.BI:
            return bi()
        if self is Language.BS:
            return bs()
        if self is Language.BR:
            return br()
        if self is Language.BG:
            return bg()
        if self is Language.MY:
            return my()
        if self is Language.CA:
            return ca()
        if self is Language.CH:
            return ch()
        if self is Language.CE:
            return ce()
        if self is Language.ZH:
            return zh()
        if self is Language.CU:
            return cu()
        if self is Language.CV:
            return cv()
        if self is Language.KW:
            return kw()
        if self is Language.CO:
            return co()
        if self is Language.CR:
            return cr()
        if self is Language.CS:
            return cs()
        if self is Language.DA:
            return da()
        if self is Language.DV:
            return dv()
        if self is Language.NL:
            return nl()
        if self is Language.DZ:
            return dz()
        if self is Language.EN:
            return en()
        if self is Language.EO:
            return eo()
        if self is Language.ET:
            return et()
        if self is Language.EE:
            return ee()
        if self is Language.FO:
            return fo()
        if self is Language.FJ:
            return fj()
        if self is Language.FI:
            return fi()
        if self is Language.FR:
            return fr()
        if self is Language.FY:
            return fy()
        if self is Language.FF:
            return ff()
        if self is Language.KA:
            return ka()
        if self is Language.DE:
            return de()
        if self is Language.GD:
            return gd()
        if self is Language.GA:
            return ga()
        if self is Language.GL:
            return gl()
        if self is Language.GV:
            return gv()
        if self is Language.EL:
            return el()
        if self is Language.GN:
            return gn()
        if self is Language.GU:
            return gu()
        if self is Language.HT:
            return ht()
        if self is Language.HA:
            return ha()
        if self is Language.HE:
            return he()
        if self is Language.HZ:
            return hz()
        if self is Language.HI:
            return hi()
        if self is Language.HO:
            return ho()
        if self is Language.HR:
            return hr()
        if self is Language.HU:
            return hu()
        if self is Language.IG:
            return ig()
        if self is Language.IS:
            return is_()
        if self is Language.IO:
            return io()
        if self is Language.II:
            return ii()
        if self is Language.IU:
            return iu()
        if self is Language.IE:
            return ie()
        if self is Language.IA:
            return ia()
        if self is Language.ID:
            return id()
        if self is Language.IK:
            return ik()
        if self is Language.IT:
            return it()
        if self is Language.JV:
            return jv()
        if self is Language.JA:
            return ja()
        if self is Language.KL:
            return kl()
        if self is Language.KN:
            return kn()
        if self is Language.KS:
            return ks()
        if self is Language.KR:
            return kr()
        if self is Language.KK:
            return kk()
        if self is Language.KM:
            return km()
        if self is Language.KI:
            return ki()
        if self is Language.RW:
            return rw()
        if self is Language.KY:
            return ky()
        if self is Language.KV:
            return kv()
        if self is Language.KG:
            return kg()
        if self is Language.KO:
            return ko()
        if self is Language.KJ:
            return kj()
        if self is Language.KU:
            return ku()
        if self is Language.LO:
            return lo()
        if self is Language.LA:
            return la()
        if self is Language.LV:
            return lv()
        if self is Language.LI:
            return li()
        if self is Language.LN:
            return ln()
        if self is Language.LT:
            return lt()
        if self is Language.LB:
            return lb()
        if self is Language.LU:
            return lu()
        if self is Language.LG:
            return lg()
        if self is Language.MK:
            return mk()
        if self is Language.MH:
            return mh()
        if self is Language.ML:
            return ml()
        if self is Language.MI:
            return mi()
        if self is Language.MR:
            return mr()
        if self is Language.MS:
            return ms()
        if self is Language.MG:
            return mg()
        if self is Language.MT:
            return mt()
        if self is Language.MN:
            return mn()
        if self is Language.NA:
            return na()
        if self is Language.NV:
            return nv()
        if self is Language.NR:
            return nr()
        if self is Language.ND:
            return nd()
        if self is Language.NG:
            return ng()
        if self is Language.NE:
            return ne()
        if self is Language.NN:
            return nn()
        if self is Language.NB:
            return nb()
        if self is Language.NO:
            return no()
        if self is Language.NY:
            return ny()
        if self is Language.OC:
            return oc()
        if self is Language.OJ:
            return oj()
        if self is Language.OR:
            return or_()
        if self is Language.OM:
            return om()
        if self is Language.OS:
            return os()
        if self is Language.PA:
            return pa()
        if self is Language.FA:
            return fa()
        if self is Language.PI:
            return pi()
        if self is Language.PL:
            return pl()
        if self is Language.PT:
            return pt()
        if self is Language.PS:
            return ps()
        if self is Language.QU:
            return qu()
        if self is Language.RM:
            return rm()
        if self is Language.RO:
            return ro()
        if self is Language.RN:
            return rn()
        if self is Language.RU:
            return ru()
        if self is Language.SG:
            return sg()
        if self is Language.SA:
            return sa()
        if self is Language.SI:
            return si()
        if self is Language.SK:
            return sk()
        if self is Language.SL:
            return sl()
        if self is Language.SE:
            return se()
        if self is Language.SM:
            return sm()
        if self is Language.SN:
            return sn()
        if self is Language.SD:
            return sd()
        if self is Language.SO:
            return so()
        if self is Language.ST:
            return st()
        if self is Language.ES:
            return es()
        if self is Language.SC:
            return sc()
        if self is Language.SR:
            return sr()
        if self is Language.SS:
            return ss()
        if self is Language.SU:
            return su()
        if self is Language.SW:
            return sw()
        if self is Language.SV:
            return sv()
        if self is Language.TY:
            return ty()
        if self is Language.TA:
            return ta()
        if self is Language.TT:
            return tt()
        if self is Language.TE:
            return te()
        if self is Language.TG:
            return tg()
        if self is Language.TL:
            return tl()
        if self is Language.TH:
            return th()
        if self is Language.BO:
            return bo()
        if self is Language.TI:
            return ti()
        if self is Language.TO:
            return to()
        if self is Language.TN:
            return tn()
        if self is Language.TS:
            return ts()
        if self is Language.TK:
            return tk()
        if self is Language.TR:
            return tr()
        if self is Language.TW:
            return tw()
        if self is Language.UG:
            return ug()
        if self is Language.UK:
            return uk()
        if self is Language.UR:
            return ur()
        if self is Language.UZ:
            return uz()
        if self is Language.VE:
            return ve()
        if self is Language.VI:
            return vi()
        if self is Language.VO:
            return vo()
        if self is Language.CY:
            return cy()
        if self is Language.WA:
            return wa()
        if self is Language.WO:
            return wo()
        if self is Language.XH:
            return xh()
        if self is Language.YI:
            return yi()
        if self is Language.YO:
            return yo()
        if self is Language.ZA:
            return za()
        if self is Language.ZU:
            return zu()
