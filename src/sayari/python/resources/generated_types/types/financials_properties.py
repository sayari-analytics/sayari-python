# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .currency import Currency

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FinancialsProperties(pydantic.BaseModel):
    assets: typing.Optional[float] = pydantic.Field(
        default=None, description="The total value of assets owned by a company"
    )
    currency: typing.Optional[Currency] = pydantic.Field(default=None, description="Reporting currency")
    date: typing.Optional[str] = pydantic.Field(default=None, description="as-of date")
    employees: typing.Optional[int] = pydantic.Field(default=None, description="Total employees")
    from_date: typing.Optional[str] = pydantic.Field(default=None, description="start date")
    liabilities: typing.Optional[float] = pydantic.Field(
        default=None, description="Sum of the combined debts a company owes"
    )
    net_income: typing.Optional[float] = pydantic.Field(
        default=None,
        description="Company's earnings for a period after subtracting operating costs, taxes, and interest",
    )
    paid_up_capital: typing.Optional[float] = pydantic.Field(
        default=None, description="Paid-up capital is the capital already held by the company"
    )
    registered_capital: typing.Optional[float] = pydantic.Field(
        default=None,
        description="Registered capital is the maximum amount of share capital that a company is authorized to raise",
    )
    revenue: typing.Optional[float] = pydantic.Field(
        default=None,
        description="The total amount of income generated by the sale of goods or services related to the company's primary operations",
    )
    to_date: typing.Optional[str] = pydantic.Field(default=None, description="end date")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
