# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .address_type import AddressType
from .language import Language

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AddressProperties(pydantic.BaseModel):
    building: typing.Optional[str]
    category: typing.Optional[str]
    city: typing.Optional[str]
    city_district: typing.Optional[str]
    country: typing.Optional[str]
    country_region: typing.Optional[str]
    entrance: typing.Optional[str]
    house: typing.Optional[str]
    house_number: typing.Optional[str]
    island: typing.Optional[str]
    language: typing.Optional[Language]
    level: typing.Optional[str]
    metro_station: typing.Optional[str]
    near: typing.Optional[str]
    po_box: typing.Optional[str]
    postcode: typing.Optional[str]
    precision_code: typing.Optional[str]
    road: typing.Optional[str]
    staircase: typing.Optional[str]
    state: typing.Optional[str]
    state_district: typing.Optional[str]
    suburb: typing.Optional[str]
    translated: typing.Optional[str]
    transliterated: typing.Optional[str]
    type: typing.Optional[AddressType]
    unit: typing.Optional[str]
    value: typing.Optional[str]
    world_region: typing.Optional[str]
    x: typing.Optional[float]
    y: typing.Optional[float]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
