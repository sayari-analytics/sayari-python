# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EventInfo(pydantic.BaseModel):
    advanced: typing.Optional[bool]
    aq: typing.Optional[typing.List[typing.Any]]
    facet_filters: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(alias="facetFilters")
    facets: typing.Optional[bool]
    fields: typing.Optional[typing.List[typing.Any]]
    filters: typing.Optional[typing.Dict[str, typing.Any]]
    geo_facets: typing.Optional[bool]
    level: str
    message: str
    search_type: typing.Optional[str]
    sort: typing.Optional[typing.List[typing.Any]]
    tags: typing.List[str]
    timestamp: str
    user: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
