# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...generated_types.types.country import Country
from ...generated_types.types.risk import Risk
from .business_purpose import BusinessPurpose

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SourceOrDestinationEntity(pydantic.BaseModel):
    id: str = pydantic.Field(description="Unique identifier of the entity")
    names: typing.List[str]
    risks: typing.Dict[Risk, typing.Any] = pydantic.Field(description="[Risks](/sayari-library/ontology/risk-factors)")
    business_purpose: typing.List[BusinessPurpose] = pydantic.Field(
        description="[Business Purpose](/sayari-library/ontology/enumerated-types#business-purpose-standard)"
    )
    countries: typing.List[Country] = pydantic.Field(
        description="[Countries](/sayari-library/ontology/enumerated-types#country)"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
