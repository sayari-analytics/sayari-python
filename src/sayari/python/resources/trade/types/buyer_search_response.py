# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...base_types.types.paginated_response import PaginatedResponse
from .supplier_or_buyer import SupplierOrBuyer


class BuyerSearchResponse(PaginatedResponse):
    """
    OK
    ---
    from sayari-analytics import (BuyerSearchResponse, Country, Entities, HsCode,
                                  Identifier, Relationships, SizeInfo,
                                  SourceCountInfo, SupplierMetadata,
                                  SupplierOrBuyer)

    BuyerSearchResponse(offset=0, limit=2, size=SizeInfo(count=5287, qualifier="eq", ), next=True, data=[SupplierOrBuyer(id="VRttegVx-TLCsNHKfNe1Cw", label='Товариство з обмеженою відповідальністю "ВЕСТ-СПРИНТ"', degree=1111, entity_url="/v1/entity/VRttegVx-TLCsNHKfNe1Cw", pep=False, psa_count=0, sanctioned=False, closed=False, translated_label="VOLYN LIMITED LIABILITY COMPANY VOLYN INSTITUTE OF INFORMATION TECHNOLOGIES", company_type="АДВОКАТСЬКЕ БЮРО", registration_date="Registered 2021-02-02", type=Entities.COMPANY, identifiers=[Identifier(value="44102648", type="ukr_edrpou", label="Ukr Edrpou", ), Identifier(value="43994030", type="ukr_edrpou", label="Ukr Edrpou", ), Identifier(value="10019810200000131", type="ukr_reg_num", label="Ukr Reg Num", ), Identifier(value="43913941", type="ukr_edrpou", label="Ukr Edrpou", ), Identifier(value="44154434", type="ukr_edrpou", label="Ukr Edrpou", )], addresses=["43025, Волинська Область, Місто Луцьк(З), Вулиця Словацького, Будинок 30, Офіс 4", "43025 Волинська обл., м. Луцьк, вул. Словацького, 30, оф. 4", "Україна, 43020, Волинська обл., місто Луцьк, вул.Рівненська, будинок 48"], countries=[Country.UKR], relationship_count={Relationships.RECEIVER_OF: 951, Relationships.HAS_BENEFICIAL_OWNER: 73, Relationships.HAS_OFFICER: 65, Relationships.HAS_SHAREHOLDER: 75, Relationships.HAS_FOUNDER: 78, Relationships.RECEIVES_FROM: 67, Relationships.HAS_LEGAL_REPRESENTATIVE: 4}, source_count={"96c06a5a03b61b91324c7e05b3114fb6": SourceCountInfo(count=951, label="Ukraine Imports & Exports (January 2023 - Present)", ), "d1bce737c158efddbef5048d63aaf124": SourceCountInfo(count=241, label="Ukraine Ministry of Justice Registry of Companies", )}, risk={}, user_attribute_counts={}, user_record_count=0, user_related_entities_count=0, user_relationship_count={}, related_entities_count=1111, attribute_counts={"company_type": 6, "name": 79, "business_purpose": 100, "identifier": 70, "additional_information": 56, "country": 2, "contact": 27, "status": 70, "address": 100}, metadata=SupplierMetadata(latest_shipment_date="2023-07-31", shipments=951, hs_codes=[HsCode(key="870323", doc_count=259, value="Vehicles; with only spark-ignition internal combustion reciprocating piston engine, cylinder capacity over 1500 but not over 3000cc", value_simple="Cars & Passenger Vehicles", ), HsCode(key="8703239013", doc_count=258, value="Vehicles; with only spark-ignition internal combustion reciprocating piston engine, cylinder capacity over 1500 but not over 3000cc", value_simple="Cars & Passenger Vehicles", ), HsCode(key="870332", doc_count=211, value="Vehicles; with only compression-ignition internal combustion piston engine (diesel or semi-diesel), cylinder capacity over 1500 but not over 2500cc", value_simple="Cars & Passenger Vehicles", ), HsCode(key="8703329030", doc_count=194, value="Vehicles; with only compression-ignition internal combustion piston engine (diesel or semi-diesel), cylinder capacity over 1500 but not over 2500cc", value_simple="Cars & Passenger Vehicles", ), HsCode(key="870322", doc_count=98, value="Vehicles; with only spark-ignition internal combustion piston engine, cylinder capacity over 1000 but not over 1500cc", value_simple="Cars & Passenger Vehicles", )], ), ), SupplierOrBuyer(id="pvg2oozEO4Z0igkTezE-tg", label="HA & COM BEBIDAS DEL MUNDO S.A.", degree=1768, entity_url="/v1/entity/pvg2oozEO4Z0igkTezE-tg", pep=False, psa_count=0, sanctioned=False, closed=False, type=Entities.COMPANY, identifiers=[Identifier(value="310100339533", type="cri_imp", label="Cri Imp", )], addresses=["Local 22"], countries=[Country.CRI], relationship_count={Relationships.SHIPPER_OF: 83, Relationships.RECEIVER_OF: 1685}, source_count={"2357c5dd6165c028180761babd0efc14": SourceCountInfo(count=1768, label="Costa Rica Imports & Exports (January 2022 - Present)", )}, risk={}, user_attribute_counts={}, user_record_count=0, user_related_entities_count=0, user_relationship_count={}, related_entities_count=1768, attribute_counts={"identifier": 1, "address": 1, "name": 1, "country": 1}, metadata=SupplierMetadata(latest_shipment_date="2023-08-30", shipments=584, hs_codes=[HsCode(key="220840", doc_count=577, value="Rum and other spirits obtained by distilling fermented sugar-cane products", value_simple="Denatured alcohol & spirits", ), HsCode(key="2208401023", doc_count=334, value="Rum and other spirits obtained by distilling fermented sugar-cane products", value_simple="Denatured alcohol & spirits", ), HsCode(key="2208401022", doc_count=243, value="Rum and other spirits obtained by distilling fermented sugar-cane products", value_simple="Denatured alcohol & spirits", ), HsCode(key="610910", doc_count=1, value="T-shirts, singlets and other vests; of cotton, knitted or crocheted", value_simple="Knitted T-shirts & vests", ), HsCode(key="6109100000", doc_count=1, value="T-shirts, singlets and other vests; of cotton, knitted or crocheted", value_simple="Knitted T-shirts & vests", )], ), )], )
    """

    offset: int
    next: bool
    data: typing.List[SupplierOrBuyer]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
