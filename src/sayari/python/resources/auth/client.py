# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ..shared_errors.errors.unauthorized import Unauthorized
from ..shared_errors.types.unauthorized_error import UnauthorizedError
from .types.access_token import AccessToken

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_token(self, *, client_id: str, client_secret: str, audience: str, grant_type: str) -> AccessToken:
        """
        Hit the auth endpoint to get a bearer token

        Parameters:
            - client_id: str.

            - client_secret: str.

            - audience: str.

            - grant_type: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "oauth/token"),
            json=jsonable_encoder(
                {"client_id": client_id, "client_secret": client_secret, "audience": audience, "grant_type": grant_type}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessToken, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise Unauthorized(pydantic.parse_obj_as(UnauthorizedError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_token(self, *, client_id: str, client_secret: str, audience: str, grant_type: str) -> AccessToken:
        """
        Hit the auth endpoint to get a bearer token

        Parameters:
            - client_id: str.

            - client_secret: str.

            - audience: str.

            - grant_type: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "oauth/token"),
            json=jsonable_encoder(
                {"client_id": client_id, "client_secret": client_secret, "audience": audience, "grant_type": grant_type}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessToken, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise Unauthorized(pydantic.parse_obj_as(UnauthorizedError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
