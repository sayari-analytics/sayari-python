# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...generated_types.types.country import Country
from ...generated_types.types.entities import Entities
from .entity_addresses import EntityAddresses
from .entity_closed import EntityClosed
from .entity_degree import EntityDegree
from .entity_dob import EntityDob
from .entity_id import EntityId
from .entity_label import EntityLabel
from .entity_pep import EntityPep
from .entity_psa_count import EntityPsaCount
from .entity_relationship_count import EntityRelationshipCount
from .entity_sanctioned import EntitySanctioned
from .entity_url import EntityUrl
from .identifier import Identifier
from .source_count import SourceCount

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EmbeddedEntity(pydantic.BaseModel):
    """
    The attributes fields common to most entities.
    """

    id: EntityId
    label: EntityLabel
    degree: EntityDegree
    closed: EntityClosed
    entity_url: EntityUrl
    pep: EntityPep
    psa_count: EntityPsaCount
    sanctioned: EntitySanctioned
    type: Entities
    identifiers: typing.List[Identifier]
    countries: typing.List[Country]
    source_count: SourceCount
    addresses: typing.List[EntityAddresses]
    date_of_birth: typing.Optional[EntityDob]
    relationship_count: EntityRelationshipCount

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
