# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...generated_types.types.entities import Entities
from ...generated_types.types.relationships import Relationships
from .entity_id import EntityId
from .identifier import Identifier
from .source_count import SourceCount

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EmbeddedEntity(pydantic.BaseModel):
    id: EntityId
    label: str
    degree: int
    closed: bool
    entity_url: str
    pep: bool
    psa_count: int
    sanctioned: bool
    type: Entities
    identifiers: typing.List[Identifier]
    countries: typing.List[str]
    psa_sanctioned: typing.Optional[str]
    source_count: SourceCount
    addresses: typing.List[str]
    date_of_birth: typing.Optional[str]
    relationship_count: typing.Dict[Relationships, int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
