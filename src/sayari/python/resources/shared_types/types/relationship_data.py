# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...generated_types.types.relationships import Relationships
from .relationship_info import RelationshipInfo

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class RelationshipData(pydantic.BaseModel):
    target: EntityDetails
    types: typing.Dict[Relationships, typing.List[RelationshipInfo]] = pydantic.Field(
        description="Additional information for each [relationship type](/sayari-library/ontology/relationships)."
    )
    dates: typing.List[str]
    first_observed: typing.Optional[str]
    former: typing.Optional[bool]
    last_observed: typing.Optional[str]
    start_date: typing.Optional[str]
    end_date: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}


from .entity_details import EntityDetails  # noqa: E402

RelationshipData.update_forward_refs()
