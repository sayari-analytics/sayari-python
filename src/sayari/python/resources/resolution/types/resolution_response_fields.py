# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...generated_types.types.country import Country
from ...generated_types.types.entities import Entities

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ResolutionResponseFields(pydantic.BaseModel):
    name: typing.Optional[typing.List[str]] = None
    identifier: typing.Optional[typing.List[str]] = None
    country: typing.Optional[typing.List[Country]] = pydantic.Field(
        default=None,
        description="Entity country - must be ISO (3166) Trigram i.e., USA. See complete list [here](/sayari-library/ontology/enumerated-types#country)",
    )
    address: typing.Optional[typing.List[str]] = pydantic.Field(
        default=None, description="List of physical addresses associated with the entity."
    )
    date_of_birth: typing.Optional[typing.List[str]] = None
    contact: typing.Optional[typing.List[str]] = None
    type: typing.Optional[typing.List[Entities]] = pydantic.Field(
        default=None, description="[Entity type](/sayari-library/ontology/entities)"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
