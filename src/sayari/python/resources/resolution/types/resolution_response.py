# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .resolution_response_fields import ResolutionResponseFields
from .resolution_result import ResolutionResult

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ResolutionResponse(pydantic.BaseModel):
    """
    OK
    ---
    from sayari-analytics import (Country, Entities, Identifier, MatchExplanation,
                                  ResolutionResponse, ResolutionResponseFields,
                                  ResolutionResult)

    ResolutionResponse(fields=ResolutionResponseFields(name=["slickdeals"], ), data=[ResolutionResult(score=117.93224, entity_id="JEVigplkPNVWqKi7P5PVXA", label="SLICKDEALS", type=Entities.INTELLECTUAL_PROPERTY, identifiers=[Identifier(type="chn_cnipa_tm", value="17024901", label="Chn Cnipa Tm", )], addresses=[], countries=[Country.CHN], sources=["8f50655ba1d1552ab4b89d119bd9c318"], typed_matched_queries=["name|0", "looseName|0"], matched_queries=["name"], highlight={"name": ["<em>SLICKDEALS</em>"]}, explanation={"name": [MatchExplanation(matched="<em>SLICKDEALS</em>", uploaded="slickdeals", name_custom_tf_idf_score=1.0, high_quality_match_name=True, )]}, ), ResolutionResult(score=116.80669, entity_id="neBaQiF_CvPtBu6H44LYXA", label="SLICKDEALS, LLC", type=Entities.COMPANY, identifiers=[Identifier(type="ca_lp_file_num", value="201305610135", label="Ca Lp File Num", )], psa_id=58531814363332, addresses=["6010 S DURANGO DR STE 100 LAS VEGAS NV  89113", "6255 W. SUNSET BLVD. STE 1400 LOS ANGELES CA  90028"], countries=[Country.USA], sources=["a447a7b622c4ead6e1caf94983dc2337", "a447a7b622c4ead6e1caf94983dc2337"], typed_matched_queries=["name|0", "looseName|0"], matched_queries=["name"], highlight={"name": ["<em>SLICKDEALS</em>, LLC"]}, explanation={"name": [MatchExplanation(matched="<em>SLICKDEALS</em>, LLC", uploaded="slickdeals", name_custom_tf_idf_score=1.0, high_quality_match_name=True, )]}, ), ResolutionResult(score=115.456085, entity_id="I1ym4TuJ9NQULcfVPY0GmQ", label="SLICKDEALS", type=Entities.INTELLECTUAL_PROPERTY, identifiers=[Identifier(type="chn_cnipa_tm", value="56200461", label="Chn Cnipa Tm", )], addresses=[], countries=[Country.CHN], sources=["8f50655ba1d1552ab4b89d119bd9c318"], typed_matched_queries=["name|0", "looseName|0"], matched_queries=["name"], highlight={"name": ["<em>SLICKDEALS</em>"]}, explanation={"name": [MatchExplanation(matched="<em>SLICKDEALS</em>", uploaded="slickdeals", name_custom_tf_idf_score=1.0, high_quality_match_name=True, )]}, ), ResolutionResult(score=114.926674, entity_id="drdPjEKZp56W4ep7yE35Jg", label="SLICKDEALS, LLC", type=Entities.COMPANY, identifiers=[], psa_id=48661979528955, addresses=["6255 W. SUNSET BOULEVARD, SUITE 1110"], countries=[Country.MEX, Country.USA], sources=["b9d809b02049993ba8dc2e4c5f7cceca"], typed_matched_queries=["name|0", "looseName|0"], matched_queries=["name"], highlight={"name": ["<em>SLICKDEALS</em>, LLC"]}, explanation={"name": [MatchExplanation(matched="<em>SLICKDEALS</em>, LLC", uploaded="slickdeals", name_custom_tf_idf_score=1.0, high_quality_match_name=True, )]}, ), ResolutionResult(score=114.83948, entity_id="WQ5ZR3Ivg_xtwrnv9h5OqQ", label="SLICKDEALS", type=Entities.INTELLECTUAL_PROPERTY, identifiers=[Identifier(type="mex_tm_no", value="RM201701911091", label="Mex Tm No", ), Identifier(type="mex_tm_no", value="RM201501632299", label="Mex Tm No", ), Identifier(type="mex_tm_app_no", value="1911091", label="Mex Tm App No", ), Identifier(type="mex_tm_app_no", value="1632299", label="Mex Tm App No", )], addresses=[], countries=[Country.MEX], sources=["b9d809b02049993ba8dc2e4c5f7cceca"], typed_matched_queries=["name|0", "looseName|0"], matched_queries=["name"], highlight={"name": ["<em>SLICKDEALS</em>"]}, explanation={"name": [MatchExplanation(matched="<em>SLICKDEALS</em>", uploaded="slickdeals", name_custom_tf_idf_score=1.0, high_quality_match_name=True, )]}, ), ResolutionResult(score=114.11019, entity_id="FzkZ8A3nvySbphZsS_WbUQ", label="SLICKDEALS", type=Entities.INTELLECTUAL_PROPERTY, identifiers=[Identifier(type="chn_cnipa_tm", value="53828647", label="Chn Cnipa Tm", )], psa_id=31696858784513, addresses=[], countries=[Country.CHN], sources=["8f50655ba1d1552ab4b89d119bd9c318"], typed_matched_queries=["name|0", "looseName|0"], matched_queries=["name"], highlight={"name": ["<em>SLICKDEALS</em>"]}, explanation={"name": [MatchExplanation(matched="<em>SLICKDEALS</em>", uploaded="slickdeals", name_custom_tf_idf_score=1.0, high_quality_match_name=True, )]}, )], )
    """

    fields: ResolutionResponseFields
    data: typing.List[ResolutionResult]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
