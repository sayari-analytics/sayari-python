# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...generated_types.types.country import Country
from ...generated_types.types.entities import Entities
from ...generated_types.types.tag import Tag
from ...shared_types.types.source_id import SourceId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FilterList(pydantic.BaseModel):
    """
    Filter your search on the following attributes.
    """

    source: typing.Optional[typing.List[SourceId]]
    country: typing.Optional[typing.List[Country]]
    state: typing.Optional[typing.List[str]]
    city: typing.Optional[typing.List[str]]
    entity_type: typing.Optional[typing.List[Entities]]
    bounds: typing.Optional[typing.List[str]]
    risk: typing.Optional[typing.List[Tag]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
