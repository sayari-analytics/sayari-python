# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UpdateAttribute(pydantic.BaseModel):
    """
    from sayari-analytics import UpdateAttribute

    UpdateAttribute(value={"street1": "1600 Pennsylvania Avenue NW", "city": "Washington DC", "state": "Washington DC", "postalCode": "20500", "country": "US"}, to_date="2024-04-30", from_date="2024-01-01", date="2024-02-15", )
    """

    value: typing.Any = pydantic.Field(description="value of additional information in JSON format")
    date: typing.Optional[str] = pydantic.Field(default=None, description="as of date of the attribute")
    from_date: typing.Optional[str] = pydantic.Field(default=None, description="start date of the attribute")
    to_date: typing.Optional[str] = pydantic.Field(default=None, description="end date of the attribute")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
