# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .shortest_path_data import ShortestPathData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ShortestPathResponse(pydantic.BaseModel):
    """
    OK
    ---
    from sayari-analytics import (Attributes, Country, Entities, EntityDetails,
                                  RelationshipAttributeValue, RelationshipInfo,
                                  Relationships, Risk, RiskData, RiskLevel,
                                  ShortestPathData, ShortestPathResponse,
                                  SourceCountInfo, TraversalPath,
                                  TraversalRelationshipData)

    ShortestPathResponse(entities=["POdbTK7mXJmILshuA3xc7Q", "E1d0DbflsC0xrRRp753bJQ"], data=[ShortestPathData(source="POdbTK7mXJmILshuA3xc7Q", target=EntityDetails(id="E1d0DbflsC0xrRRp753bJQ", label="SD Engage Parent LLC", degree=1, entity_url="/v1/entity/E1d0DbflsC0xrRRp753bJQ", pep=False, psa_id="24240795543836", psa_count=3, sanctioned=False, closed=False, type=Entities.COMPANY, identifiers=[], addresses=["6255 W Sunset Blvd, Suite 1110, Los Angeles, CA, USA"], countries=[Country.USA], relationship_count={Relationships.SHAREHOLDER_OF: 1}, source_count={"933e409d7392aff90418a15fd47de72f": SourceCountInfo(count=1, label="USA Nevada Secretary of State", )}, risk={Risk.BASEL_AML: RiskData(value=4.63, metadata={"country": ["USA"]}, level=RiskLevel.RELEVANT, ), Risk.CPI_SCORE: RiskData(value=67, metadata={"country": ["USA"]}, level=RiskLevel.RELEVANT, )}, ), path=[TraversalPath(field="has_shareholder", entity=EntityDetails(id="E1d0DbflsC0xrRRp753bJQ", label="SD Engage Parent LLC", degree=1, entity_url="/v1/entity/E1d0DbflsC0xrRRp753bJQ", pep=False, psa_id="24240795543836", psa_count=3, sanctioned=False, closed=False, type=Entities.COMPANY, identifiers=[], addresses=["6255 W Sunset Blvd, Suite 1110, Los Angeles, CA, USA"], countries=[Country.USA], relationship_count={Relationships.SHAREHOLDER_OF: 1}, source_count={"933e409d7392aff90418a15fd47de72f": SourceCountInfo(count=1, label="USA Nevada Secretary of State", )}, risk={Risk.BASEL_AML: RiskData(value=4.63, metadata={"country": ["USA"]}, level=RiskLevel.RELEVANT, ), Risk.CPI_SCORE: RiskData(value=67, metadata={"country": ["USA"]}, level=RiskLevel.RELEVANT, )}, ), relationships={"has_shareholder": TraversalRelationshipData(values=[RelationshipInfo(record="933e409d7392aff90418a15fd47de72f/1153258/1678406400000", date="2023-03-10", acquisition_date="2023-03-10", publication_date="2023-03-10", attributes={Attributes.POSITION: [RelationshipAttributeValue(value="Managing Member", )]}, )], )}, )], )], )
    """

    entities: typing.List[str]
    data: typing.List[ShortestPathData]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
