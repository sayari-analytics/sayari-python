# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .project_notification_data import ProjectNotificationData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ProjectNotificationsResponse(pydantic.BaseModel):
    """
    OK
    ---
    from sayari-analytics import (Notification, NotificationType,
                                  ProjectNotificationData,
                                  ProjectNotificationsResponse, Risk)

    ProjectNotificationsResponse(offset=0, limit=20, next=False, data=[ProjectNotificationData(id="dlOL1cZzEkIEZcRUcrBZCQ", entity_id="dlOL1cZzEkIEZcRUcrBZCQ", resource_id="0eZQ43", notifications=[Notification(type=NotificationType.RISK, field=Risk.FORCED_LABOR_XINJIANG_ORIGIN_SUBTIER, values=[], date="2024-02-06T00:00:00.000Z", )], ), ProjectNotificationData(id="wxwqZshCF4trlrmOa2eu9w", entity_id="wxwqZshCF4trlrmOa2eu9w", resource_id="03ePyj", notifications=[Notification(type=NotificationType.RISK, field=Risk.FORCED_LABOR_SHEFFIELD_HALLAM_UNIVERSITY_REPORTS_ORIGIN_SUBTIER, values=[], date="2024-02-15T00:00:00.000Z", )], ), ProjectNotificationData(id="dX9cfM3FPefIp8VAuBKgIQ", entity_id="dX9cfM3FPefIp8VAuBKgIQ", resource_id="0XEQaX", notifications=[Notification(type=NotificationType.RISK, field=Risk.FORCED_LABOR_SHEFFIELD_HALLAM_UNIVERSITY_REPORTS_ORIGIN_DIRECT, values=[], date="2024-02-15T00:00:00.000Z", ), Notification(type=NotificationType.RISK, field=Risk.FORCED_LABOR_SHEFFIELD_HALLAM_UNIVERSITY_REPORTS_ORIGIN_SUBTIER, values=[], date="2024-02-15T00:00:00.000Z", ), Notification(type=NotificationType.RISK, field=Risk.OWNER_OF_REGULATORY_ACTION_ENTITY, values=[], date="2024-02-06T00:00:00.000Z", )], )], )
    """

    offset: int
    limit: int
    next: bool
    data: typing.List[ProjectNotificationData]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
