# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from .types.topics import Topics
import datetime as dt
from ..core.request_options import RequestOptions
from .types.negative_news_response import NegativeNewsResponse
from ..core.pydantic_utilities import parse_obj_as
from ..shared_errors.errors.bad_request import BadRequest
from ..shared_errors.types.bad_request_response import BadRequestResponse
from ..shared_errors.errors.unauthorized import Unauthorized
from ..shared_errors.types.unauthorized_response import UnauthorizedResponse
from ..shared_errors.errors.not_found import NotFound
from ..shared_errors.types.not_found_response import NotFoundResponse
from ..shared_errors.errors.rate_limit_exceeded import RateLimitExceeded
from ..shared_errors.types.rate_limit_response import RateLimitResponse
from ..shared_errors.errors.internal_server_error import InternalServerError
from ..shared_errors.types.internal_server_error_response import InternalServerErrorResponse
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper


class NegativeNewsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def negative_news(
        self,
        *,
        name: str,
        topic: typing.Optional[Topics] = None,
        until: typing.Optional[dt.date] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NegativeNewsResponse:
        """
        <Warning>This endpoint is in beta and subject to change</Warning>
        Screens entities against news articles and public records to identify risk-relevant content.
        Leverages machine learning to detect and classify risks across various domains.
        Provides detailed article metadata with risk assessments and direct source references.

        Parameters
        ----------
        name : str
            Target entity name for adverse media screening.

        topic : typing.Optional[Topics]
            Risk category filter for targeted screening. Each topic represents a distinct risk domain (e.g., `environmental` for environmental violations, `financial` for financial misconduct).

        until : typing.Optional[dt.date]
            Date cutoff for article inclusion in `YYYY-MM-DD` format. If provided, only articles published before this date will be included in results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NegativeNewsResponse

        Examples
        --------
        import datetime

        from sayari import Sayari

        client = Sayari(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.negative_news.negative_news(
            name="Gazprom",
            topic="sanctions",
            until=datetime.date.fromisoformat(
                "2024-10-01",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/negative_news",
            method="GET",
            params={
                "name": name,
                "topic": topic,
                "until": str(until) if until is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    NegativeNewsResponse,
                    parse_obj_as(
                        type_=NegativeNewsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequest(
                    typing.cast(
                        BadRequestResponse,
                        parse_obj_as(
                            type_=BadRequestResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise Unauthorized(
                    typing.cast(
                        UnauthorizedResponse,
                        parse_obj_as(
                            type_=UnauthorizedResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFound(
                    typing.cast(
                        NotFoundResponse,
                        parse_obj_as(
                            type_=NotFoundResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise RateLimitExceeded(
                    typing.cast(
                        RateLimitResponse,
                        parse_obj_as(
                            type_=RateLimitResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        InternalServerErrorResponse,
                        parse_obj_as(
                            type_=InternalServerErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncNegativeNewsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def negative_news(
        self,
        *,
        name: str,
        topic: typing.Optional[Topics] = None,
        until: typing.Optional[dt.date] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NegativeNewsResponse:
        """
        <Warning>This endpoint is in beta and subject to change</Warning>
        Screens entities against news articles and public records to identify risk-relevant content.
        Leverages machine learning to detect and classify risks across various domains.
        Provides detailed article metadata with risk assessments and direct source references.

        Parameters
        ----------
        name : str
            Target entity name for adverse media screening.

        topic : typing.Optional[Topics]
            Risk category filter for targeted screening. Each topic represents a distinct risk domain (e.g., `environmental` for environmental violations, `financial` for financial misconduct).

        until : typing.Optional[dt.date]
            Date cutoff for article inclusion in `YYYY-MM-DD` format. If provided, only articles published before this date will be included in results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NegativeNewsResponse

        Examples
        --------
        import asyncio
        import datetime

        from sayari import AsyncSayari

        client = AsyncSayari(
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.negative_news.negative_news(
                name="Gazprom",
                topic="sanctions",
                until=datetime.date.fromisoformat(
                    "2024-10-01",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/negative_news",
            method="GET",
            params={
                "name": name,
                "topic": topic,
                "until": str(until) if until is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    NegativeNewsResponse,
                    parse_obj_as(
                        type_=NegativeNewsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequest(
                    typing.cast(
                        BadRequestResponse,
                        parse_obj_as(
                            type_=BadRequestResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise Unauthorized(
                    typing.cast(
                        UnauthorizedResponse,
                        parse_obj_as(
                            type_=UnauthorizedResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFound(
                    typing.cast(
                        NotFoundResponse,
                        parse_obj_as(
                            type_=NotFoundResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise RateLimitExceeded(
                    typing.cast(
                        RateLimitResponse,
                        parse_obj_as(
                            type_=RateLimitResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        InternalServerErrorResponse,
                        parse_obj_as(
                            type_=InternalServerErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
