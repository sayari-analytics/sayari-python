# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .ontology_base_filters import OntologyBaseFilters
import typing
from .ontology_enum import OntologyEnum
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class GetOntologyEnumsResponse(UniversalBaseModel):
    """
    Examples
    --------
    from sayari.ontology import (
        GetOntologyEnumsResponse,
        OntologyBaseFilters,
        OntologyEnum,
        OntologyEnumSymbol,
    )

    GetOntologyEnumsResponse(
        filters=OntologyBaseFilters(
            id=["address_type"],
        ),
        data=[
            OntologyEnum(
                id="address_type",
                label="Address Type",
                comment="This enumerated type indicates the kind of location an address is referring to.",
                symbols=[
                    OntologyEnumSymbol(
                        id="arrival",
                        label="Arrival",
                        comment="This enumerated type indicates the kind of location an address is referring to.",
                    )
                ],
            )
        ],
        total_count=1234,
    )
    """

    filters: OntologyBaseFilters
    data: typing.List[OntologyEnum]
    total_count: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
