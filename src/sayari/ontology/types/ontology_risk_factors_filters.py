# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...generated_types.types.risk import Risk
import pydantic
from ...generated_types.types.risk_category import RiskCategory
from ...shared_types.types.risk_level import RiskLevel
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class OntologyRiskFactorsFilters(UniversalBaseModel):
    id: typing.Optional[typing.List[Risk]] = pydantic.Field(default=None)
    """
    Risk factor Id filter.
    """

    risk_category: typing.Optional[typing.List[RiskCategory]] = pydantic.Field(default=None)
    """
    Risk category filter.
    """

    level: typing.Optional[typing.List[RiskLevel]] = pydantic.Field(default=None)
    """
    Risk level filter.
    """

    risk_type: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Risk type filter.
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Risk enabled filter.
    """

    visible: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Risk visible filter.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
