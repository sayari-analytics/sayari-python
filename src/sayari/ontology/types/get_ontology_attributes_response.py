# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .ontology_attributes_filters import OntologyAttributesFilters
import typing
from .ontology_attribute import OntologyAttribute
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class GetOntologyAttributesResponse(UniversalBaseModel):
    """
    Examples
    --------
    from sayari.ontology import (
        GetOntologyAttributesResponse,
        OntologyAttribute,
        OntologyAttributeField,
        OntologyAttributesFilters,
    )

    GetOntologyAttributesResponse(
        filters=OntologyAttributesFilters(
            id=["additional_information"],
        ),
        data=[
            OntologyAttribute(
                id="additional_information",
                label="Additional Information",
                comment="This is a generic attribute used to hold miscellaneous information not covered by any other attribute.",
                fields=[
                    OntologyAttributeField(
                        id="value",
                        label="Value",
                        comment="The additional information itself",
                        type=["null", "string"],
                    )
                ],
            )
        ],
        total_count=1234,
    )
    """

    filters: OntologyAttributesFilters
    data: typing.List[OntologyAttribute]
    total_count: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
