# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ...generated_types.types.entities import Entities
from .identifier import Identifier
from ...generated_types.types.country import Country
from .source_count_info import SourceCountInfo
from .relationship_count import RelationshipCount
from ...generated_types.types.attributes import Attributes
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class EmbeddedEntity(UniversalBaseModel):
    """
    Fields of an entity when nested within other data structures.
    """

    id: str = pydantic.Field()
    """
    Unique identifier of the entity
    """

    label: str = pydantic.Field()
    """
    Display name of the entity
    """

    degree: int = pydantic.Field()
    """
    Number of outgoing relationships
    """

    closed: bool = pydantic.Field()
    """
    True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
    """

    entity_url: str = pydantic.Field()
    """
    Convenience URL to the entity in the API.
    """

    pep: bool = pydantic.Field()
    """
    True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
    """

    psa_id: typing.Optional[str] = None
    psa_count: int = pydantic.Field()
    """
    Number of entities that are Possibly the Same As (PSA) the entity.
    """

    sanctioned: bool = pydantic.Field()
    """
    True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
    """

    type: Entities = pydantic.Field()
    """
    The [entity type](/sayari-library/ontology/entities).
    """

    identifiers: typing.List[Identifier]
    countries: typing.List[Country] = pydantic.Field()
    """
    Entity [country](/sayari-library/ontology/enumerated-types#country)
    """

    source_count: typing.Dict[str, SourceCountInfo] = pydantic.Field()
    """
    Number of records associated with the entity, grouped by source.
    """

    addresses: typing.List[str] = pydantic.Field()
    """
    List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
    """

    trade_count: typing.Dict[str, int]
    date_of_birth: typing.Optional[str] = pydantic.Field(default=None)
    """
    Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
    """

    relationship_count: RelationshipCount
    user_relationship_count: RelationshipCount
    attribute_count: typing.Dict[Attributes, int] = pydantic.Field()
    """
    Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
    """

    user_attribute_count: typing.Dict[Attributes, int] = pydantic.Field()
    """
    Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
    """

    attribute_counts: typing.Optional[typing.Dict[Attributes, int]] = pydantic.Field(default=None)
    """
    Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
    """

    user_attribute_counts: typing.Optional[typing.Dict[Attributes, int]] = pydantic.Field(default=None)
    """
    Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
    """

    related_entities_count: int
    user_related_entities_count: int
    user_record_count: int
    reference_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
