# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .currency import Currency
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class SharesProperties(UniversalBaseModel):
    currency: typing.Optional[Currency] = pydantic.Field(default=None)
    """
    The currency of the monetary_value
    """

    date: typing.Optional[str] = pydantic.Field(default=None)
    """
    as-of date
    """

    from_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    start date
    """

    monetary_value: typing.Optional[float] = pydantic.Field(default=None)
    """
    The total monetary value of the shares
    """

    num_shares: typing.Optional[float] = pydantic.Field(default=None)
    """
    The number of shares held, issued, etc.
    """

    percentage: typing.Optional[float] = pydantic.Field(default=None)
    """
    The percentage of shares owned
    """

    to_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    end date
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    A string describing the type of shares (e.g., "Class B", "Protected cell shares")
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
