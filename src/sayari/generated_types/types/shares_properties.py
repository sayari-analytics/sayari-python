# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .currency import Currency


class SharesProperties(pydantic_v1.BaseModel):
    currency: typing.Optional[Currency] = pydantic_v1.Field(default=None)
    """
    The currency of the monetary_value
    """

    date: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    as-of date
    """

    from_date: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    start date
    """

    monetary_value: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The total monetary value of the shares
    """

    num_shares: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The number of shares held, issued, etc.
    """

    percentage: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The percentage of shares owned
    """

    to_date: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    end date
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A string describing the type of shares (e.g., "Class B", "Protected cell shares")
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
