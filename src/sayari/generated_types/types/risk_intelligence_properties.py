# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
from .tag import Tag
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class RiskIntelligenceProperties(UniversalBaseModel):
    authority: typing.Optional[str] = pydantic.Field(default=None)
    """
    Government authority issuing the enforcement or risk intelligence action
    """

    date: typing.Optional[str] = pydantic.Field(default=None)
    """
    as-of date
    """

    from_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    start date
    """

    list_: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="list")] = pydantic.Field(default=None)
    """
    Official list where the entity's risk information or enforcement action is recorded
    """

    program: typing.Optional[str] = pydantic.Field(default=None)
    """
    Specific to sanctions risk. Sanctions program under which the entity is designated.
    """

    reason: typing.Optional[str] = pydantic.Field(default=None)
    """
    Explanation or legal basis for the risk intelligence
    """

    to_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    end date
    """

    type: Tag = pydantic.Field()
    """
    Type of risk intelligence
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
