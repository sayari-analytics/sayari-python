# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from ...generated_types.types.risk import Risk
from ...shared_types.types.risk_value import RiskValue
from .notification_additional_information import NotificationAdditionalInformation
from .notification_type import NotificationType


class Notification(pydantic_v1.BaseModel):
    type: NotificationType = pydantic_v1.Field()
    """
    The type of notification, currently limited to 'risk'
    """

    field: Risk = pydantic_v1.Field()
    """
    The field that the notification is for
    """

    values: typing.List[RiskValue] = pydantic_v1.Field()
    """
    The previous values of the field
    """

    date: str = pydantic_v1.Field()
    """
    The date the notification was created
    """

    additional_information: typing.Optional[NotificationAdditionalInformation] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
