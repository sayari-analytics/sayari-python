# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from ...generated_types.types.country import Country
from ...generated_types.types.entities import Entities
from ...shared_types.types.identifier import Identifier
from .match_explanation import MatchExplanation


class ResolutionResult(pydantic_v1.BaseModel):
    score: float
    entity_id: str
    label: str
    type: Entities
    identifiers: typing.List[Identifier]
    psa_id: typing.Optional[float] = None
    addresses: typing.List[str]
    countries: typing.List[Country]
    sources: typing.List[str]
    typed_matched_queries: typing.List[str]
    matched_queries: typing.List[str]
    highlight: typing.Dict[str, typing.List[str]]
    explanation: typing.Dict[str, typing.List[MatchExplanation]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
