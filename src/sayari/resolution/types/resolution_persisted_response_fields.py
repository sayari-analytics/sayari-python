# This file was auto-generated by Fern from our API Definition.

from .resolution_response_fields import ResolutionResponseFields
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ResolutionPersistedResponseFields(ResolutionResponseFields):
    custom_field_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="custom_{field name}")] = (
        pydantic.Field(default=None)
    )
    """
    <Warning>This property is in beta and is subject to change. It is provided for early access and testing purposes only.</Warning> custom user key/value pairs (key must be prefixed with "custom\_" and value must be "string" type)
    """

    custom_name: typing.Optional[str] = None
    custom_identifier: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
