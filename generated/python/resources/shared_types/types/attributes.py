# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .attribute_details import AttributeDetails


class Attributes(pydantic.BaseModel):
    additional_information: typing.Optional[AttributeDetails]
    address: typing.Optional[AttributeDetails]
    business_purpose: typing.Optional[AttributeDetails]
    company_type: typing.Optional[AttributeDetails]
    country: typing.Optional[AttributeDetails]
    date_of_birth: typing.Optional[AttributeDetails]
    financials: typing.Optional[AttributeDetails]
    gender: typing.Optional[AttributeDetails]
    identifier: typing.Optional[AttributeDetails]
    measurement: typing.Optional[AttributeDetails]
    monetary_value: typing.Optional[AttributeDetails]
    name: typing.Optional[AttributeDetails]
    position: typing.Optional[AttributeDetails]
    risk_intelligence: typing.Optional[AttributeDetails]
    shares: typing.Optional[AttributeDetails]
    status: typing.Optional[AttributeDetails]
    translated_name: typing.Optional[AttributeDetails]
    weak_identifier: typing.Optional[AttributeDetails]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
