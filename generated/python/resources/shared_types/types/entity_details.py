# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .attributes import Attributes
from .entity_id import EntityId
from .entity_type import EntityType
from .identifier import Identifier
from .possibly_same_as import PossiblySameAs
from .referenced_by import ReferencedBy
from .relationship_count import RelationshipCount
from .relationships import Relationships
from .risk import Risk
from .source_count import SourceCount
from .status import Status


class EntityDetails(pydantic.BaseModel):
    id: EntityId
    label: str
    degree: int
    closed: bool
    entity_url: str
    pep: bool
    psa_count: int
    sanctioned: bool
    registration_date: str
    translated_label: typing.Optional[str]
    psa_sanctioned: typing.Optional[str]
    date_of_birth: typing.Optional[str]
    hs_code: typing.Optional[str]
    shipment_arrival: typing.Optional[str]
    shipment_departure: typing.Optional[str]
    company_type: typing.Optional[str]
    latest_status: Status
    type: EntityType
    identifiers: typing.List[Identifier]
    addresses: typing.List[str]
    countries: typing.List[str]
    relationship_count: RelationshipCount
    source_count: SourceCount
    risk: Risk
    attributes: Attributes
    relationships: Relationships
    possibly_same_as: PossiblySameAs
    referenced_by: ReferencedBy
    matches: typing.Optional[typing.Dict[str, typing.List[str]]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
