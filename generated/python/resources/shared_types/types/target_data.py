# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .entity_type import EntityType
from .identifier import Identifier
from .relationship_count import RelationshipCount
from .risk import Risk
from .source_count import SourceCount


class TargetData(pydantic.BaseModel):
    id: str
    label: str
    degree: int
    entity_url: str
    pep: bool
    psa_count: int
    sanctioned: bool
    closed: bool
    company_type: str
    type: EntityType
    identifiers: typing.List[Identifier]
    addresses: typing.List[str]
    countries: typing.List[str]
    relationship_count: RelationshipCount
    source_count: SourceCount
    risk: Risk
    types: EntityType
    dates: typing.List[str]
    first_observed: str
    last_observed: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
