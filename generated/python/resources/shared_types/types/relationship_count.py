# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime


class RelationshipCount(pydantic.BaseModel):
    auditor_of: typing.Optional[int]
    beneficial_owner_of: typing.Optional[int]
    branch_of: typing.Optional[int]
    director_of: typing.Optional[int]
    employee_of: typing.Optional[int]
    family_of: typing.Optional[int]
    founder_of: typing.Optional[int]
    issuer_of: typing.Optional[int]
    lawyer_in: typing.Optional[int]
    lawyer_of: typing.Optional[int]
    legal_predecessor_of: typing.Optional[int]
    legal_representative_of: typing.Optional[int]
    legal_successor_of: typing.Optional[int]
    linked_to: typing.Optional[int]
    liquidator_of: typing.Optional[int]
    manager_of: typing.Optional[int]
    member_of_the_board_of: typing.Optional[int]
    officer_of: typing.Optional[int]
    owner_of: typing.Optional[int]
    partner_of: typing.Optional[int]
    party_to: typing.Optional[int]
    receiver_of: typing.Optional[int]
    registered_agent_of: typing.Optional[int]
    shareholder_of: typing.Optional[int]
    shipper_of: typing.Optional[int]
    ships_to: typing.Optional[int]
    subsidiary_of: typing.Optional[int]
    supervisor_of: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
