# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class FilterKey(str, enum.Enum):
    SOURCE = "source"
    COUNTRY = "country"
    STATE = "state"
    CITY = "city"
    ENTITY_TYPE = "entity_type"
    BOUNDS = "bounds"
    RISK = "risk"

    def visit(
        self,
        source: typing.Callable[[], T_Result],
        country: typing.Callable[[], T_Result],
        state: typing.Callable[[], T_Result],
        city: typing.Callable[[], T_Result],
        entity_type: typing.Callable[[], T_Result],
        bounds: typing.Callable[[], T_Result],
        risk: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is FilterKey.SOURCE:
            return source()
        if self is FilterKey.COUNTRY:
            return country()
        if self is FilterKey.STATE:
            return state()
        if self is FilterKey.CITY:
            return city()
        if self is FilterKey.ENTITY_TYPE:
            return entity_type()
        if self is FilterKey.BOUNDS:
            return bounds()
        if self is FilterKey.RISK:
            return risk()
